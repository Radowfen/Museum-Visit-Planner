import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class BST {
    private Node root;
    private Map<Integer, String> roomNumbers;

    private class Node {
        private int value;
        private Node left;
        private Node right;

        public Node(int value) {
            this.value = value;
        }
    }

    public BST() {
        roomNumbers = new HashMap<>();
        roomNumbers.put(20, "K1");
        roomNumbers.put(10, "R101");
        roomNumbers.put(25, "K2");
        roomNumbers.put(5, "R102");
        roomNumbers.put(15, "R103");
        roomNumbers.put(22, "R201");
        roomNumbers.put(30, "R204");
        roomNumbers.put(21, "R202");
        roomNumbers.put(24, "R203");
        roomNumbers.put(28, "R205");
        roomNumbers.put(35, "R206");
    }

    public Node search(int roomNumber) {
        return search(root, roomNumber);
    }

    private Node search(Node node, int roomNumber) {
        if (node == null || node.value == roomNumber) {
            return node;
        }

        if (roomNumber < node.value) {
            return search(node.left, roomNumber);
        } else {
            return search(node.right, roomNumber);
        }
    }

    public List<String> getPathTo(int roomNumber) {
        List<String> path = new ArrayList<>();
        getPathTo(root, roomNumber, path);
        return path;
    }

    private boolean getPathTo(Node node, int roomNumber, List<String> path) {
        if (node == null) {
            return false;
        }

        path.add(roomNumbers.get(node.value));

        if (node.value == roomNumber) {
            return true;
        }

        if (roomNumber < node.value && getPathTo(node.left, roomNumber, path)) {
            return true;
        }

        if (roomNumber > node.value && getPathTo(node.right, roomNumber, path)) {
            return true;
        }

        path.remove(roomNumbers.get(node.value));
        return false;
    }

    public void insert(int roomNumber) {
        root = insert(root, roomNumber);
    }

    private Node insert(Node node, int roomNumber) {
        if (node == null) {
            return new Node(roomNumber);
        }

        if (roomNumber < node.value) {
            node.left = insert(node.left, roomNumber);
        } else if (roomNumber > node.value) {
            node.right = insert(node.right, roomNumber);
        }

        return node;
    }

    public static void main(String[] args) {
        BST bst = new BST();

        // insert nodes
        bst.insert(20);
        bst.insert(10);
        bst.insert(25);
        bst.insert(5);
        bst.insert(15);
        bst.insert(22);
        bst.insert(30);
        bst.insert(21);
        bst.insert(24);
        bst.insert(28);
        bst.insert(35);

         // search for a node
         Node node = bst.search(28);
         if (node != null) {
             System.out.println("Found node with value " + bst.roomNumbers.get(node.value));
         } else {
             System.out.println("Node not found");
         }

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter room number to find path to: ");
        int roomNumber = scanner.nextInt();
        List<String> path = bst.getPathTo(roomNumber);
        if (!path.isEmpty()) {
            System.out.println("Path to room number " + roomNumber + ": " + String.join(" -> ", path) + " -> END");
        } else {
            System.out.println("Path not found");
        }

    }
}
