import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;


public class BST {

    private Node root;
    public Map<Integer, String> roomNumbers = new HashMap<>();

    private static class Node {
        private int value;
        private Node left, right;

        public Node(int value) {
            this.value = value;
        }
    }

    public void insert(int value, String roomNumber) {
        roomNumbers.put(value, roomNumber);
        root = insert(root, value);
    }

    private Node insert(Node node, int value) {
        if (node == null) {
            return new Node(value);
        }

        if (value < node.value) {
            node.left = insert(node.left, value);
        } else if (value > node.value) {
            node.right = insert(node.right, value);
        }

        return node;
    }

    public Node search(int value) {
        return search(root, value);
    }

    private Node search(Node node, int value) {
        if (node == null || node.value == value) {
            return node;
        }

        if (value < node.value) {
            return search(node.left, value);
        } else {
            return search(node.right, value);
        }
    }

    public List<String> getPathTo(int value) {
        List<String> path = new ArrayList<>();

        Node node = root;
        while (node != null) {
            if (value < node.value) {
                path.add(roomNumbers.get(node.value));
                node = node.left;
            } else if (value > node.value) {
                path.add(roomNumbers.get(node.value));
                node = node.right;
            } else {
                // found the node
                path.add(roomNumbers.get(node.value));
                break;
            }
        }

        return path;
    }

    public static void main(String[] args) {
        BST bst = new BST();

        // insert nodes
        bst.insert(20, "K1");
        bst.insert(10, "R101");
        bst.insert(25, "K2");
        bst.insert(5, "R102");
        bst.insert(15, "R103");
        bst.insert(22, "R201");
        bst.insert(30, "R204");
        bst.insert(21, "R202");
        bst.insert(24, "R203");
        bst.insert(28, "R205");
        bst.insert(35, "R206");

        // scan the requested room number or floor from the user
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the room number or floor: ");
        String input = scanner.nextLine();

        // convert input to integer
        int value = Integer.parseInt(input);

        // search for a node
        Node node = bst.search(value);
        if (node != null) {
            System.out.println("Found node with value " + bst.roomNumbers.get(node.value));
        } else {
            System.out.println("Node not found");
        }
        
        // find the path to a node
        List<String> path = bst.getPathTo(value);
        if (path.size() > 0) {
            System.out.print("Path to room number " + value + ": ");
            for (String room : path) {
                System.out.print(room + " -> ");
            }
            System.out.println("END");
        } else {
            System.out.println("Path not found");
        }
    }
}
